source('B:/Data/R/rock/R/parse_source.R')
res <- parse_source(here::here("tests",
"testthat",
"second-test-file.rock"));
res$deductiveCodeTree
source('B:/Data/R/rock/R/parse_source.R')
res <- parse_source(here::here("tests",
"testthat",
"second-test-file.rock"));
res$deductiveCodeTree
source('B:/Data/R/rock/R/parse_source.R')
source('B:/Data/R/rock/R/parse_source.R')
source('B:/Data/R/rock/R/parse_source.R')
res <- parse_source(here::here("tests",
"testthat",
"second-test-file.rock"));
res
res <- parse_source(here::here("tests",
"testthat",
"sylvias-test.rock"));
res$deductiveCodeTrees
res <- parse_source(here::here("tests",
"testthat",
"lorum-ipsum.rock"));
source('B:/Data/R/rock/R/parse_source.R')
res <- parse_source(here::here("tests",
"testthat",
"lorum-ipsum.rock"));
source('B:/Data/R/rock/R/parse_source.R')
res <- parse_source(here::here("tests",
"testthat",
"lorum-ipsum.rock"));
source('B:/Data/R/rock/R/parse_source.R')
source('B:/Data/R/rock/R/parse_source.R')
source('B:/Data/R/rock/R/parse_source.R')
res <- parse_source(here::here("tests",
"testthat",
"lorum-ipsum.rock"));
?readLines
source('B:/Data/R/rock/R/parse_source.R')
res <- parse_source(here::here("tests",
"testthat",
"lorum-ipsum.rock"));
res
source('B:/Data/R/rock/R/parse_source.R')
res
source('B:/Data/R/rock/R/parse_source.R')
res
source('B:/Data/R/rock/R/parse_source.R')
source('B:/Data/R/rock/R/parse_source.R')
res
source('B:/Data/R/rock/R/parse_source.R')
res
res <- parse_source(here::here("tests",
"testthat",
"second-test-file.rock"));
source('B:/Data/R/rock/R/parse_source.R')
res <- parse_source(here::here("tests",
"testthat",
"second-test-file.rock"));
res
source('B:/Data/R/rock/R/parse_source.R')
res <- parse_source(here::here("tests",
"testthat",
"second-test-file.rock"));
res
res$deductiveCodeTrees$EM_SEM_Psych$label
res <- parse_sources(here::here("tests",
"testthat"));
source('B:/Data/R/rock/R/parse_sources.R')
res <- parse_sources(here::here("tests",
"testthat"));
source('B:/Data/R/rock/R/parse_sources.R')
source('B:/Data/R/rock/R/parse_sources.R')
res <- parse_sources(here::here("tests",
"testthat"));
source('B:/Data/R/rock/R/parse_sources.R')
source('B:/Data/R/rock/R/parse_sources.R')
source('B:/Data/R/rock/R/parse_sources.R')
source('B:/Data/R/rock/R/parse_sources.R')
source('B:/Data/R/rock/R/parse_sources.R')
res <- parse_sources(here::here("tests",
"testthat"));
source('B:/Data/R/rock/R/parse_sources.R')
res <- parse_sources(here::here("tests",
"testthat"));
res$parsedSources$`sylvias-test.rock`$deductiveCodes
source('B:/Data/R/rock/R/parse_sources.R')
res <- parse_sources(here::here("tests",
"testthat"));
source('B:/Data/R/rock/R/parse_sources.R')
res <- parse_sources(here::here("tests",
"testthat"));
source('B:/Data/R/rock/R/parse_sources.R')
res <- parse_sources(here::here("tests",
"testthat"));
res$deductiveCodeTrees
source('B:/Data/R/rock/R/parse_sources.R')
source('B:/Data/R/rock/R/parse_sources.R')
res <- parse_sources(here::here("tests",
"testthat"));
debug(build_tree)
debug('build_tree')
debug(yum::build_tree)
res <- parse_sources(here::here("tests",
"testthat"));
install.packages("B:/Data/R/yum_0.0.1.tar.gz", repos = NULL, type = "source")
source('B:/Data/R/rock/R/parse_sources.R')
source('B:/Data/R/rock/R/parse_source.R')
source('B:/Data/R/rock/R/delete_yaml_fragments.R')
res <- parse_sources(here::here("tests",
"testthat"));
install.packages("B:/Data/R/yum_0.0.1.tar.gz", repos = NULL, type = "source")
res <- parse_sources(here::here("tests",
"testthat"));
require(yum)
res <- parse_sources(here::here("tests",
"testthat"));
install.packages("B:/Data/R/yum_0.0.1.tar.gz", repos = NULL, type = "source")
source('B:/Data/R/rock/R/parse_source.R')
source('B:/Data/R/rock/R/parse_sources.R')
res <- parse_sources(here::here("tests",
"testthat"));
install.packages("B:/Data/R/yum_0.0.1.tar.gz", repos = NULL, type = "source")
source('B:/Data/R/rock/R/parse_source.R')
source('B:/Data/R/rock/R/parse_sources.R')
res <- parse_sources(here::here("tests",
"testthat"));
res
res$deductiveCodeTrees
source('B:/Data/R/rock/R/parse_sources.R')
source('B:/Data/R/rock/R/parse_sources.R')
res <- parse_sources(here::here("tests",
"testthat"),
regex = "ipsum");
source('B:/Data/R/rock/R/apply_graph_theme.R')
res <- parse_sources(here::here("tests",
"testthat"),
regex = "ipsum");
source('B:/Data/R/rock/R/parse_sources.R')
res <- parse_sources(here::here("tests",
"testthat"),
regex = "ipsum");
source('B:/Data/R/rock/R/parse_sources.R')
res <- parse_sources(here::here("tests",
"testthat"),
regex = "ipsum");
res
length(res$deductiveCodeTree)
children(res$deductiveCodeTree)
res$deductiveCodeTree$count
source('B:/Data/R/rock/R/parse_sources.R')
res$deductiveCodeTree$count
res <- parse_sources(here::here("tests",
"testthat"),
regex = "ipsum");
res
res <- parse_sources(here::here("tests",
"testthat"));
res
?parse_sources
res <- parse_sources(here::here("tests",
"testthat"),
extension="dct");
devtools::document()
devtools::document()
devtools::document()
devtools::document()
source('B:/Data/R/rock/R/rock_example_1.R')
rock_example_1
parse_source(text=rock_example_1)
source('B:/Data/R/rock/R/rock_example_1.R')
parse_source(text=rock_example_1)
source('B:/Data/R/rock/R/parse_source.R')
parse_source(text=rock_example_1)
source('B:/Data/R/rock/R/parse_source.R')
source('B:/Data/R/rock/R/parse_source.R')
parse_source(text=rock_example_1)
source('B:/Data/R/rock/R/parse_source.R')
parse_source(text=rock_example_1)
source('B:/Data/R/rock/R/rock_example_1.R')
parse_source(text=rock_example_1)
?strsplit
source('B:/Data/R/rock/R/rock_example_1.R')
source('B:/Data/R/rock/R/rock_example_1.R')
parse_source(text=rock_example_1)
source('B:/Data/R/rock/R/parse_source.R')
parse_source(text=rock_example_1)
devtools::install_github("matherion/yum")
parse_source(text=rock_example_1)
source('B:/Data/R/rock/R/parse_source.R')
parse_source(text=rock_example_1)
source('B:/Data/R/rock/R/rock_example_1.R')
parse_source(text=rock_example_1)
?apply_graph_theme
devtools::document()
?apply_graph_theme
exampleSource <- unlist(strsplit('
---
codes:
-
id: parentCode
label: Parent code
children:
-
id: childCode1
-
id: childCode2
---', split="\\n", fixed=TRUE));
parseSource(exampleSource)
parse_source(exampleSource)
parse_source(text=exampleSource)
exampleSource
exampleSource <- unlist(strsplit('
---
codes:
-
id: parentCode
label: Parent code
children:
-
id: childCode1
-
id: childCode2
---', split="\n", fixed=TRUE));
parse_source(text=exampleSource)
exampleSource
parse_source(text=exampleSource)
source('B:/Data/R/rock/R/parse_source.R')
parse_source(text=exampleSource)
parsedSource <- parse_source(text=exampleSource)
?apply_graph_theme
exampleSource <- unlist(strsplit('
---
codes:
-
id: parentCode
label: Parent code
children:
-
id: childCode1
-
id: childCode2
---', split="\\n", fixed=TRUE));
extractedSpecs <- extract_dct_specs(text=unlist(strsplit(dct::example_dct_spec, '\n')));
dctGraph <- parse_dct_specs(extractedSpecs)$output$graph
dctGraph <- apply_graph_theme(dctGraph,
c("color", "#0000AA", "node"),
c("fillcolor", "#00FFFF", "node"));
dectools::document();
devtools::document();
?apply_graph_theme
exampleSource <- unlist(strsplit('
---
codes:
-
id: parentCode
label: Parent code
children:
-
id: childCode1
-
id: childCode2
---', split="\n", fixed=TRUE));
parsedSource <-
parse_source(text=exampleSource);
miniGraph <-
apply_graph_theme(parsedSource$deductiveCodeTrees,
c("color", "#0000AA", "node"),
c("fillcolor", "#00FFFF", "node"));
devtools::document();
?apply_graph_theme
exampleSource <- unlist(strsplit('
---
codes:
-
id: parentCode
label: Parent code
children:
-
id: childCode1
-
id: childCode2
---
', split="\n", fixed=TRUE));
parsedSource <-
parse_source(text=exampleSource);
miniGraph <-
apply_graph_theme(parsedSource$deductiveCodeTrees,
c("color", "#0000AA", "node"),
c("fillcolor", "#00FFFF", "node"));
exampleSource <- unlist(strsplit('
---
codes:
-
id: parentCode
label: Parent code
children:
-
id: childCode1
-
id: childCode2
---
', split="\n", fixed=TRUE));
parsedSource <-
parse_source(text=exampleSource);
miniGraph <-
apply_graph_theme(parsedSource$deductiveCodeTrees,
c("color", "#0000AA", "node"),
c("fillcolor", "#00FFFF", "node"));
miniGraph <-
apply_graph_theme(data.tree::ToDiagrammeRGraph(parsedSource$deductiveCodeTrees),
c("color", "#0000AA", "node"),
c("fillcolor", "#00FFFF", "node"));
miniGraph
DiagrammeR::render_graph(miniGraph)
miniGraph <-
apply_graph_theme(data.tree::ToDiagrammeRGraph(parsedSource$deductiveCodeTrees),
c("color", "#0000AA", "node"),
c("fill", "#00FFFF", "node"));
miniGraph <-
apply_graph_theme(data.tree::ToDiagrammeRGraph(parsedSource$deductiveCodeTrees),
c("color", "#0000AA", "node"),
c("fill", "#00FFFF", "node"));DiagrammeR::render_graph(miniGraph)
miniGraph <-
apply_graph_theme(data.tree::ToDiagrammeRGraph(parsedSource$deductiveCodeTrees),
c("color", "#0000AA", "node"),
c("textcolor", "#00FFFF", "node"));DiagrammeR::render_graph(miniGraph)
miniGraph <-
apply_graph_theme(data.tree::ToDiagrammeRGraph(parsedSource$deductiveCodeTrees),
c("color", "#0000AA", "node"),
c("fontcolor", "#00FFFF", "node"));DiagrammeR::render_graph(miniGraph)
miniGraph <-
apply_graph_theme(data.tree::ToDiagrammeRGraph(parsedSource$deductiveCodeTrees),
c("color", "#0000AA", "node"),
c("shape", "triangle", "node"),
c("fontcolor", "#00FFFF", "node"));DiagrammeR::render_graph(miniGraph)
miniGraph <-
apply_graph_theme(data.tree::ToDiagrammeRGraph(parsedSource$deductiveCodeTrees),
c("color", "#0000AA", "node"),
c("shape", "triangle", "node"));DiagrammeR::render_graph(miniGraph)
devtools::document()
?apply_graph_theme
miniGraph <-
apply_graph_theme(data.tree::ToDiagrammeRGraph(parsedSource$deductiveCodeTrees),
c("color", "#0000AA", "node"),
c("shape", "triangle", "node"),
c("fontcolor", "#FF0000", "node"));
plot(miniGraph)
render(miniGraph)
render_graph(miniGraph)
DiagrammeR::render_graph(miniGraph)
cat('\u2026')
devtools::document()
?data.tree::`data.tree-package`
devtools::document()
devtools::document()
source('B:/Data/R/rock/R/rock_example_1.R')
devtools::document()
devtools::document()
devtools::document()
?dplyr::`dplyr-package`
devtools::document()
source('B:/Data/R/rock/R/parse_source.R')
?head
source('B:/Data/R/rock/R/parse_source.R')
?setNames
source('B:/Data/R/rock/R/parse_source.R')
source('B:/Data/R/rock/R/parse_source.R')
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
cat('\u2026')
devtools::document()
devtools::document()
devtools::document()
devtools::document()
source('B:/Data/R/rock/R/parse_source.R')
source('B:/Data/R/rock/R/parse_source.R')
devtools::document()
devtools::document()
devtools::document()
devtools::document()
?apply_graph_theme
exampleSource <- unlist(strsplit('
---
codes:
-
id: parentCode
label: Parent code
children:
-
id: childCode1
-
id: childCode2
---
', split="\n", fixed=TRUE));
parsedSource <-
parse_source(text=exampleSource);
exampleSource <- unlist(strsplit('
---
codes:
-
id: parentCode
label: Parent code
children:
-
id: childCode1
-
id: childCode2
---
', split="\n", fixed=TRUE));
parsedSource <-
parse_source(text=exampleSource);
miniGraph <-
apply_graph_theme(data.tree::ToDiagrammeRGraph(parsedSource$deductiveCodeTrees),
c("color", "#0000AA", "node"),
c("shape", "triangle", "node"),
c("fontcolor", "#FF0000", "node"));
DiagrammeR::render_graph(miniGraph);
devtools::document()
?apply_graph_theme
exampleSource <- unlist(strsplit('
---
codes:
-
id: parentCode
label: Parent code
children:
-
id: childCode1
-
id: childCode2
-
id: childCode3
label: Child Code
parentId: parentCode
children: ['grandChild1', 'grandChild2']
---
', split="\n", fixed=TRUE))
exampleSource <- unlist(strsplit('
---
codes:
-
id: parentCode
label: Parent code
children:
-
id: childCode1
-
id: childCode2
-
id: childCode3
label: Child Code
parentId: parentCode
children: ['grandChild1', 'grandChild2']
---
', split="\n", fixed=TRUE));
devtools::document()
?apply_graph_theme
exampleSource <- unlist(strsplit('
---
codes:
-
id: parentCode
label: Parent code
children:
-
id: childCode1
-
id: childCode2
-
id: childCode3
label: Child Code
parentId: parentCode
children: [grandChild1, grandChild2]
---
', split="\n", fixed=TRUE));
parsedSource <-
parse_source(text=exampleSource);
miniGraph <-
apply_graph_theme(data.tree::ToDiagrammeRGraph(parsedSource$deductiveCodeTrees),
c("color", "#0000AA", "node"),
c("shape", "triangle", "node"),
c("fontcolor", "#FF0000", "node"));
### This line should be run when executing this example as test, because
### rendering a DiagrammeR graph takes quite long
## Not run:
DiagrammeR::render_graph(miniGraph);
## End(Not run)
'
parsedSource$deductiveCodeTrees
parsedSource$deductiveCodes
source('B:/Data/R/rock/R/parse_source.R')
devtools::document()
source('B:/Data/R/rock/R/parse_source.R')
source('B:/Data/R/rock/R/parse_source.R')
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
pkgdown::build_site()
source('B:/Data/R/rock/R/parse_sources.R')
source('B:/Data/R/rock/R/parse_source.R')
source('B:/Data/R/rock/R/parse_sources.R')
source('B:/Data/R/rock/R/parse_sources.R')
source('B:/Data/R/rock/R/parse_sources.R')
source('B:/Data/R/rock/R/parse_sources.R')
source('B:/Data/R/rock/R/parse_source.R')

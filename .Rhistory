but otherwise... not really, actually."));
source('B:/Data/R/rock/R/clean_source.R', encoding = 'UTF-8')
cat(clean_source("Do you like icecream?
Well, that depends… Sometimes, when it's..... Nice. Then I do,
but otherwise... not really, actually."));
source('B:/Data/R/rock/R/clean_source.R', encoding = 'UTF-8')
cat(clean_source("Do you like icecream?
Well, that depends… Sometimes, when it's..... Nice. Then I do,
but otherwise... not really, actually."));
source('B:/Data/R/rock/R/clean_source.R', encoding = 'UTF-8')
cat(clean_source("Do you like icecream?
Well, that depends… Sometimes, when it's..... Nice. Then I do,
but otherwise... not really, actually."));
source('B:/Data/R/rock/R/clean_source.R', encoding = 'UTF-8')
cat(clean_source("Do you like icecream?
Well, that depends… Sometimes, when it's..... Nice. Then I do,
but otherwise... not really, actually."));
source('B:/Data/R/rock/R/clean_source.R', encoding = 'UTF-8')
cat(clean_source("Do you like icecream?
Well, that depends… Sometimes, when it's..... Nice. Then I do,
but otherwise... not really, actually."));
source('B:/Data/R/rock/R/clean_source.R', encoding = 'UTF-8')
cat(clean_source("Do you like icecream?
Well, that depends… Sometimes, when it's..... Nice. Then I do,
but otherwise... not really, actually."));
source('B:/Data/R/rock/R/clean_source.R', encoding = 'UTF-8')
cat(clean_source("Do you like icecream?
Well, that depends… Sometimes, when it's..... Nice. Then I do,
but otherwise... not really, actually."));
source('B:/Data/R/rock/R/clean_source.R', encoding = 'UTF-8')
cat(clean_source("Do you like icecream?
Well, that depends… Sometimes, when it's..... Nice. Then I do,
but otherwise... not really, actually."));
source('B:/Data/R/rock/R/clean_source.R', encoding = 'UTF-8')
cat(clean_source("Do you like icecream?
Well, that depends… Sometimes, when it's..... Nice. Then I do,
but otherwise... not really, actually."));
source('B:/Data/R/rock/R/clean_source.R', encoding = 'UTF-8')
cat(clean_source("Do you like icecream?
Well, that depends… Sometimes, when it's..... Nice. Then I do,
but otherwise... not really, actually."));
source('B:/Data/R/rock/R/clean_source.R', encoding = 'UTF-8')
cat(clean_source("Do you like icecream?
Well, that depends… Sometimes, when it's..... Nice. Then I do,
but otherwise... not really, actually."));
source('B:/Data/R/rock/R/clean_source.R', encoding = 'UTF-8')
source('B:/Data/R/rock/R/clean_source.R', encoding = 'UTF-8')
cat(clean_source("Do you like icecream?
Well, that depends… Sometimes, when it's..... Nice. Then I do,
but otherwise... not really, actually."));
exampleSource <-
"Do you like icecream?
Well, that depends… Sometimes, when it's..... Nice. Then I do,
but otherwise... not really, actually."
cat(clean_source(exampleSource));
cat(clean_source(exampleSource,
removeNewlines=TRUE));
source('B:/Data/R/rock/R/clean_source.R', encoding = 'UTF-8')
cat(clean_source(exampleSource,
removeNewlines=TRUE));
source('B:/Data/R/rock/R/clean_source.R', encoding = 'UTF-8')
cat(clean_source(exampleSource,
removeNewlines=TRUE));
source('B:/Data/R/rock/R/clean_source.R', encoding = 'UTF-8')
cat(clean_source(exampleSource,
removeNewlines=TRUE));
source('B:/Data/R/rock/R/clean_source.R', encoding = 'UTF-8')
cat(clean_source(exampleSource,
removeNewlines=TRUE));
source('B:/Data/R/rock/R/clean_source.R', encoding = 'UTF-8')
source('B:/Data/R/rock/R/clean_source.R', encoding = 'UTF-8')
cat(clean_source(exampleSource,
removeNewlines=TRUE));
source('B:/Data/R/rock/R/clean_source.R', encoding = 'UTF-8')
cat(clean_source(exampleSource,
removeNewlines=TRUE));
source('B:/Data/R/rock/R/clean_source.R', encoding = 'UTF-8')
source('B:/Data/R/rock/R/clean_source.R', encoding = 'UTF-8')
cat(clean_source(exampleSource,
removeNewlines=TRUE));
source('B:/Data/R/rock/R/clean_source.R', encoding = 'UTF-8')
source('B:/Data/R/rock/R/clean_source.R', encoding = 'UTF-8')
source('B:/Data/R/rock/R/clean_source.R', encoding = 'UTF-8')
cat(clean_source(exampleSource,
removeNewlines=TRUE));
source('B:/Data/R/rock/R/clean_source.R', encoding = 'UTF-8')
cat(clean_source(exampleSource,
removeNewlines=TRUE));
source('B:/Data/R/rock/R/clean_source.R', encoding = 'UTF-8')
cat(clean_source(exampleSource,
removeNewlines=TRUE));
source('B:/Data/R/rock/R/clean_source.R', encoding = 'UTF-8')
cat(clean_source(exampleSource,
removeNewlines=TRUE));
source('B:/Data/R/rock/R/clean_source.R', encoding = 'UTF-8')
cat(clean_source(exampleSource,
removeNewlines=TRUE));
devtools::document()
source('B:/Data/R/rock/R/clean_source.R', encoding = 'UTF-8')
devtools::document()
devtools::document()
pkgdown::build_site()
source('B:/Data/R/rock/R/clean_source.R', encoding = 'UTF-8')
source('B:/Data/R/rock/R/clean_source.R', encoding = 'UTF-8')
devtools::document()
pkgdown::build_site()
yum::flatten_list_of_lists(1:3)
install.packages('B:/Data/R/yum_0.0.1.tar.gz')
?install.packages
install.packages("C:/Sync/Data/R/yum_0.0.1.tar.gz", repos = NULL, type = "source")
yum::flatten_list_of_lists(1:3)
?glue::as_glue
?graphics::plot
workingPath <- "B:/Data/research/qualitative-quantitative interfacing/Qualitative rENA";
x <- readLines("B:/Data/research/qualitative-quantitative interfacing/Qualitative rENA/arena/sylvias-test.rock");
y <- parse_source(x);
library(rock)
y <- parse_source(x);
source('B:/Data/R/rock/R/parse_source.R')
y <- parse_source(x);
source('B:/Data/R/rock/R/parse_source.R')
y <- parse_source(x);
source('B:/Data/R/rock/R/parse_source.R')
y <- parse_source(x);
source('B:/Data/R/rock/R/parse_source.R')
y <- parse_source(x);
source('B:/Data/R/rock/R/parse_source.R')
?data.tree::SetGraphStyle
source('B:/Data/R/rock/R/parse_source.R')
source('B:/Data/R/rock/R/parse_source.R')
y <- parse_source(x);
y
x2 <- readLines("B:/Data/research/qualitative-quantitative interfacing/Qualitative rENA/arena/second-test-file.rock");
y2 <- parse_source(x2);
y2
enaTest <- parse_sources(path="B:/Data/research/qualitative-quantitative interfacing/Qualitative rENA/arena");
library(rock)
enaTest <- parse_sources(path="B:/Data/research/qualitative-quantitative interfacing/Qualitative rENA/arena");
enaTest
enaTest <- parse_sources(path="B:/Data/research/qualitative-quantitative interfacing/Qualitative rENA/arena");
library(rock)
enaTest
source('B:/Data/R/rock/R/parse_sources.R')
enaTest
source('B:/Data/R/rock/R/parse_sources.R')
enaTest
source('B:/Data/R/rock/R/parse_sources.R')
enaTest
source('B:/Data/R/rock/R/parse_sources.R')
enaTest
dctTest <- parse_sources('B:/Data/research/decentralized-construct-taxonomy/dct-files');
source('B:/Data/R/rock/R/parse_sources.R')
dctTest <- parse_sources('B:/Data/research/decentralized-construct-taxonomy/dct-files');
source('B:/Data/R/rock/R/parse_sources.R')
dctTest <- parse_sources('B:/Data/research/decentralized-construct-taxonomy/dct-files');
names(dctTest)
names(dctTest$parsedSources)
names(dctTest$parsedSources[[1]])
names(dctTest$parsedSources[[1]]$yamlFragments)
dctTest$parsedSources[[1]]$yamlFragments
install.packages('B:/Data/R/yum_0.0.1.tar.gz', repos=NULL, type='source')
dctTest <- parse_sources('B:/Data/research/decentralized-construct-taxonomy/dct-files');
dtcTest
dctTest
source('B:/Data/R/rock/R/parse_sources.R')
dctTest <- parse_sources('B:/Data/research/decentralized-construct-taxonomy/dct-files');
dctTest <- parse_sources('B:/Data/research/decentralized-construct-taxonomy/dct-files', silent=FALSE);
source('B:/Data/R/rock/R/parse_sources.R')
dctTest <- parse_sources('B:/Data/research/decentralized-construct-taxonomy/dct-files', silent=FALSE);
parse_sources('B:/Data/research/decentralized-construct-taxonomy/dct-files', silent=FALSE);
dctTest <- parse_sources('B:/Data/research/decentralized-construct-taxonomy/dct-files', silent=FALSE);
source('B:/Data/R/rock/R/parse_sources.R')
dctTest <- parse_sources('B:/Data/research/decentralized-construct-taxonomy/dct-files', silent=FALSE);
source('B:/Data/R/rock/R/parse_sources.R')
dctTest <- parse_sources('B:/Data/research/decentralized-construct-taxonomy/dct-files', silent=FALSE);
dctTest <- parse_sources('B:/Data/research/decentralized-construct-taxonomy/dct-files', silent=FALSE);
library(rock)
dctTest <- parse_sources('B:/Data/research/decentralized-construct-taxonomy/dct-files', silent=FALSE);
dctTest <- parse_sources('B:/Data/research/decentralized-construct-taxonomy/dct-files', silent=FALSE);
source('B:/Data/R/rock/R/parse_sources.R')
source('B:/Data/R/rock/R/parse_sources.R')
dctTest <- parse_sources('B:/Data/research/decentralized-construct-taxonomy/dct-files', silent=FALSE);
dctTest <- parse_sources('B:/Data/research/decentralized-construct-taxonomy/dct-files');
dctTest <- parse_sources('B:/Data/research/decentralized-construct-taxonomy/dct-files', silent=FALSE);
str(dctTest$deductiveCodeList)
dctTest$deductiveCodeList
source('B:/Data/R/rock/R/parse_sources.R')
dctTest <- parse_sources('B:/Data/research/decentralized-construct-taxonomy/dct-files', silent=FALSE);
source('B:/Data/R/rock/R/parse_sources.R')
dctTest <- parse_sources('B:/Data/research/decentralized-construct-taxonomy/dct-files', silent=FALSE);
source('B:/Data/R/rock/R/parse_sources.R')
dctTest <- parse_sources('B:/Data/research/decentralized-construct-taxonomy/dct-files', silent=FALSE);
source('B:/Data/R/rock/R/parse_sources.R')
dctTest <- parse_sources('B:/Data/research/decentralized-construct-taxonomy/dct-files', silent=FALSE);
source('B:/Data/R/rock/R/parse_sources.R')
dctTest <- parse_sources('B:/Data/research/decentralized-construct-taxonomy/dct-files', silent=FALSE);
source('B:/Data/R/rock/R/parse_sources.R')
dctTest <- parse_sources('B:/Data/research/decentralized-construct-taxonomy/dct-files', silent=FALSE);
source('B:/Data/R/rock/R/parse_sources.R')
dctTest <- parse_sources('B:/Data/research/decentralized-construct-taxonomy/dct-files', silent=FALSE);
source('B:/Data/R/rock/R/parse_sources.R')
dctTest <- parse_sources('B:/Data/research/decentralized-construct-taxonomy/dct-files', silent=FALSE);
names(dctTest$rawSpecs)
names(dctTest$rawSpecs$attitude.dct)
length(dctTest$rawSpecs$attitude.dct)
dctTest$rawSpecs$attitude.dct
source('B:/Data/R/rock/R/parse_sources.R')
dctTest$rawSpecs$attitude.dct
dctTest <- parse_sources('B:/Data/research/decentralized-construct-taxonomy/dct-files', silent=FALSE);
yamlLineSets
a<-yum::load_yaml_list(yamlLineSets)
a[[1]]
a[[2]]
str(a)
a<-yum::load_yaml_list(yamlLineSets)
str(a)
str(yamlLineSets)
a<-yum::load_yaml_list(yamlLineSets, recursive = TRUE)
a
str(yamlLineSets)
load_yaml_fragments(yamlLineSets[[1]])
yum::load_yaml_fragments(yamlLineSets[[1]])
yum::load_yaml_fragments(yamlLineSets[[1]], file=NULL)
yum::extract_yaml_fragments(yamlLineSets[[1]], file=NULL)
yum::extract_yaml_fragments(text=yamlLineSets[[1]])
yamlLineSets[[1]]
source('B:/Data/R/rock/R/parse_sources.R')
dctTest <- parse_sources('B:/Data/research/decentralized-construct-taxonomy/dct-files', silent=FALSE);
source('B:/Data/R/rock/R/parse_sources.R')
dctTest <- parse_sources('B:/Data/research/decentralized-construct-taxonomy/dct-files', silent=FALSE);
yamlLineSets$attitude.dct[[1]]
yamlLineSets$attitude.dct
yamlLineSets$behavior.dct2
yum::load_yaml_list(yamlLineSets$behavior.dct2)
yum::load_yaml_list(yamlLineSets)
str(rawSpecs)
names(rawSpecs)
rawSpecs[[1]]
source('B:/Data/R/rock/R/parse_sources.R')
dctTest <- parse_sources('B:/Data/research/decentralized-construct-taxonomy/dct-files', silent=FALSE);
source('B:/Data/R/rock/R/parse_sources.R')
dctTest <- parse_sources('B:/Data/research/decentralized-construct-taxonomy/dct-files', silent=FALSE);
source('B:/Data/R/rock/R/parse_sources.R')
dctTest <- parse_sources('B:/Data/research/decentralized-construct-taxonomy/dct-files', silent=FALSE);
purrr::map(rawSpecs, 'dct')
names(rawSpecs[[1]])
names(rawSpecs[[1]][[1]])
?map
purrr::map(rawSpecs, list(list('dct')))
purrr::map(rawSpecs, 1, 'dct')
rawSpecs$behavior.dct1
source('B:/Data/R/rock/R/parse_sources.R')
dctTest <- parse_sources('B:/Data/research/decentralized-construct-taxonomy/dct-files', silent=FALSE);
source('B:/Data/R/rock/R/parse_sources.R')
source('B:/Data/R/rock/R/parse_sources.R')
dctTest$parsedSources$attitude.dct
attributes(dctTest$parsedSources$attitude.dct)
attr(dctTest$parsedSources$attitude.dct, 'yamlFragments')
?attr
attr(dctTest$parsedSources$attitude.dct, 'codings')
attr(dctTest$parsedSources$attitude.dct, 'rawSourceDf')
dctTest$parsedSources$attitude.dct
attributes(dctTest$parsedSources$attitude.dct)
dctTest$parsedSources$attitude.dct$yamlFragments
dctTest$parsedSources$behavior.dct$yamlFragments
source('B:/Data/R/rock/R/parse_sources.R')
dctTest <- parse_sources('B:/Data/research/decentralized-construct-taxonomy/dct-files', silent=FALSE);
source('B:/Data/R/rock/R/parse_sources.R')
dctTest <- parse_sources('B:/Data/research/decentralized-construct-taxonomy/dct-files', silent=FALSE);
source('B:/Data/R/rock/R/parse_sources.R')
source('B:/Data/R/rock/R/parse_sources.R')
dctTest <- parse_sources('B:/Data/research/decentralized-construct-taxonomy/dct-files', silent=FALSE);
source('B:/Data/R/rock/R/parse_sources.R')
dctTest <- parse_sources('B:/Data/research/decentralized-construct-taxonomy/dct-files', silent=FALSE);
source('B:/Data/R/rock/R/parse_sources.R')
dctTest <- parse_sources('B:/Data/research/decentralized-construct-taxonomy/dct-files', silent=FALSE);
dctTest <- parse_sources('B:/Data/research/decentralized-construct-taxonomy/dct-files');
dctTest;
source('B:/Data/R/rock/R/parse_sources.R')
enaTest <- parse_sources(path="B:/Data/research/qualitative-quantitative interfacing/Qualitative rENA/arena");
install.packages("B:/Data/R/yum_0.0.1.tar.gz", repos = NULL, type = "source")
?writeLines
source('B:/Data/R/rock/R/parse_source.R')
source('B:/Data/R/rock/R/parse_source.R')
source('B:/Data/R/rock/R/parse_source.R')
source('B:/Data/R/rock/R/parse_source.R')
source('B:/Data/R/rock/R/parse_source.R')
source('B:/Data/R/rock/R/parse_source.R')
source('B:/Data/R/rock/R/parse_source.R')
res <- parse_source("sylvias-test.rock");
res <- parse_source(here::here("tests",
"testthat",
"sylvias-test.rock"));
res
res <- parse_source(here::here("tests",
"testthat",
"second-test-file.rock"));
res <- parse_source(here::here("tests",
"testthat",
"sylvias-test.rock"));
names(res)
names(res$inductiveCodeTrees$code$IC$Attack)
res$inductiveCodeTrees$code$IC$Attack$label
res <- parse_source(here::here("tests",
"testthat",
"sylvias-test.rock"));
testthat::expect_equal(res$inductiveCodeTrees$code$IC$Attack$label,
"Attack");
res <- parse_source(here::here("tests",
"testthat",
"second-test-file.rock"));
res
res <- parse_sources(here::here("tests",
"testthat"),
regex="second-test-file.rock"));
res <- parse_sources(here::here("tests",
"testthat"),
regex="second-test-file.rock");
source('B:/Data/R/rock/R/parse_sources.R')
res <- parse_sources(here::here("tests",
"testthat"),
regex="second-test-file.rock");
source('B:/Data/R/rock/R/parse_source.R')
res <- parse_sources(here::here("tests",
"testthat"),
regex="second-test-file.rock");
source('B:/Data/R/rock/R/parse_source.R')
res <- parse_sources(here::here("tests",
"testthat"),
regex="second-test-file.rock");
source('B:/Data/R/rock/R/parse_sources.R')
res <- parse_sources(here::here("tests",
"testthat"),
regex="second-test-file.rock");
source('B:/Data/R/rock/R/parse_sources.R')
res <- parse_sources(here::here("tests",
"testthat"),
regex="second-test-file.rock");
source('B:/Data/R/rock/R/parse_source.R')
source('B:/Data/R/rock/R/parse_source.R')
source('B:/Data/R/rock/R/parse_source.R')
source('B:/Data/R/rock/R/parse_source.R')
source('B:/Data/R/rock/R/parse_source.R')
res <- parse_source(here::here("tests",
"testthat",
"second-test-file.rock"));
res$metadata
res$deductiveCodes
source('B:/Data/R/rock/R/parse_source.R')
res <- parse_source(here::here("tests",
"testthat",
"second-test-file.rock"));
res$deductiveCodeTree
source('B:/Data/R/rock/R/parse_source.R')
res <- parse_source(here::here("tests",
"testthat",
"second-test-file.rock"));
res$deductiveCodeTree
source('B:/Data/R/rock/R/parse_source.R')
source('B:/Data/R/rock/R/parse_source.R')
source('B:/Data/R/rock/R/parse_source.R')
res <- parse_source(here::here("tests",
"testthat",
"second-test-file.rock"));
res
res <- parse_source(here::here("tests",
"testthat",
"sylvias-test.rock"));
res$deductiveCodeTrees
res <- parse_source(here::here("tests",
"testthat",
"lorum-ipsum.rock"));
source('B:/Data/R/rock/R/parse_source.R')
res <- parse_source(here::here("tests",
"testthat",
"lorum-ipsum.rock"));
source('B:/Data/R/rock/R/parse_source.R')
res <- parse_source(here::here("tests",
"testthat",
"lorum-ipsum.rock"));
source('B:/Data/R/rock/R/parse_source.R')
source('B:/Data/R/rock/R/parse_source.R')
source('B:/Data/R/rock/R/parse_source.R')
res <- parse_source(here::here("tests",
"testthat",
"lorum-ipsum.rock"));
?readLines
source('B:/Data/R/rock/R/parse_source.R')
res <- parse_source(here::here("tests",
"testthat",
"lorum-ipsum.rock"));
res
source('B:/Data/R/rock/R/parse_source.R')
res
source('B:/Data/R/rock/R/parse_source.R')
res
source('B:/Data/R/rock/R/parse_source.R')
source('B:/Data/R/rock/R/parse_source.R')
res
source('B:/Data/R/rock/R/parse_source.R')
res
res <- parse_source(here::here("tests",
"testthat",
"second-test-file.rock"));
source('B:/Data/R/rock/R/parse_source.R')
res <- parse_source(here::here("tests",
"testthat",
"second-test-file.rock"));
res
source('B:/Data/R/rock/R/parse_source.R')
res <- parse_source(here::here("tests",
"testthat",
"second-test-file.rock"));
res
res$deductiveCodeTrees$EM_SEM_Psych$label
res <- parse_sources(here::here("tests",
"testthat"));
source('B:/Data/R/rock/R/parse_sources.R')
res <- parse_sources(here::here("tests",
"testthat"));
source('B:/Data/R/rock/R/parse_sources.R')
source('B:/Data/R/rock/R/parse_sources.R')
res <- parse_sources(here::here("tests",
"testthat"));
source('B:/Data/R/rock/R/parse_sources.R')
source('B:/Data/R/rock/R/parse_sources.R')
source('B:/Data/R/rock/R/parse_sources.R')
source('B:/Data/R/rock/R/parse_sources.R')
source('B:/Data/R/rock/R/parse_sources.R')
res <- parse_sources(here::here("tests",
"testthat"));
source('B:/Data/R/rock/R/parse_sources.R')
res <- parse_sources(here::here("tests",
"testthat"));
res$parsedSources$`sylvias-test.rock`$deductiveCodes
source('B:/Data/R/rock/R/parse_sources.R')
res <- parse_sources(here::here("tests",
"testthat"));
source('B:/Data/R/rock/R/parse_sources.R')
res <- parse_sources(here::here("tests",
"testthat"));
source('B:/Data/R/rock/R/parse_sources.R')
res <- parse_sources(here::here("tests",
"testthat"));
res$deductiveCodeTrees
source('B:/Data/R/rock/R/parse_sources.R')
source('B:/Data/R/rock/R/parse_sources.R')
res <- parse_sources(here::here("tests",
"testthat"));
debug(build_tree)
debug('build_tree')
debug(yum::build_tree)
res <- parse_sources(here::here("tests",
"testthat"));
install.packages("B:/Data/R/yum_0.0.1.tar.gz", repos = NULL, type = "source")
source('B:/Data/R/rock/R/parse_sources.R')
source('B:/Data/R/rock/R/parse_source.R')
source('B:/Data/R/rock/R/delete_yaml_fragments.R')
res <- parse_sources(here::here("tests",
"testthat"));
install.packages("B:/Data/R/yum_0.0.1.tar.gz", repos = NULL, type = "source")
res <- parse_sources(here::here("tests",
"testthat"));
require(yum)
res <- parse_sources(here::here("tests",
"testthat"));
install.packages("B:/Data/R/yum_0.0.1.tar.gz", repos = NULL, type = "source")
source('B:/Data/R/rock/R/parse_source.R')
source('B:/Data/R/rock/R/parse_sources.R')
res <- parse_sources(here::here("tests",
"testthat"));
install.packages("B:/Data/R/yum_0.0.1.tar.gz", repos = NULL, type = "source")
source('B:/Data/R/rock/R/parse_source.R')
source('B:/Data/R/rock/R/parse_sources.R')
res <- parse_sources(here::here("tests",
"testthat"));
res
res$deductiveCodeTrees
source('B:/Data/R/rock/R/parse_sources.R')
source('B:/Data/R/rock/R/parse_sources.R')
res <- parse_sources(here::here("tests",
"testthat"),
regex = "ipsum");
source('B:/Data/R/rock/R/apply_graph_theme.R')
res <- parse_sources(here::here("tests",
"testthat"),
regex = "ipsum");
source('B:/Data/R/rock/R/parse_sources.R')
res <- parse_sources(here::here("tests",
"testthat"),
regex = "ipsum");
source('B:/Data/R/rock/R/parse_sources.R')
res <- parse_sources(here::here("tests",
"testthat"),
regex = "ipsum");
res
length(res$deductiveCodeTree)
children(res$deductiveCodeTree)
res$deductiveCodeTree$count
source('B:/Data/R/rock/R/parse_sources.R')
res$deductiveCodeTree$count
res <- parse_sources(here::here("tests",
"testthat"),
regex = "ipsum");
res
res <- parse_sources(here::here("tests",
"testthat"));
res
?parse_sources
res <- parse_sources(here::here("tests",
"testthat"),
extension="dct");

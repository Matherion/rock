source('B:/Data/R/rock/R/parse_sources.R')
dctTest <- parse_sources('B:/Data/research/decentralized-construct-taxonomy/dct-files', silent=FALSE);
source('B:/Data/R/rock/R/parse_sources.R')
dctTest <- parse_sources('B:/Data/research/decentralized-construct-taxonomy/dct-files', silent=FALSE);
source('B:/Data/R/rock/R/parse_sources.R')
dctTest <- parse_sources('B:/Data/research/decentralized-construct-taxonomy/dct-files', silent=FALSE);
source('B:/Data/R/rock/R/parse_sources.R')
dctTest <- parse_sources('B:/Data/research/decentralized-construct-taxonomy/dct-files', silent=FALSE);
source('B:/Data/R/rock/R/parse_sources.R')
dctTest <- parse_sources('B:/Data/research/decentralized-construct-taxonomy/dct-files', silent=FALSE);
source('B:/Data/R/rock/R/parse_sources.R')
dctTest <- parse_sources('B:/Data/research/decentralized-construct-taxonomy/dct-files', silent=FALSE);
source('B:/Data/R/rock/R/parse_sources.R')
dctTest <- parse_sources('B:/Data/research/decentralized-construct-taxonomy/dct-files', silent=FALSE);
names(dctTest$rawSpecs)
names(dctTest$rawSpecs$attitude.dct)
length(dctTest$rawSpecs$attitude.dct)
dctTest$rawSpecs$attitude.dct
source('B:/Data/R/rock/R/parse_sources.R')
dctTest$rawSpecs$attitude.dct
dctTest <- parse_sources('B:/Data/research/decentralized-construct-taxonomy/dct-files', silent=FALSE);
yamlLineSets
a<-yum::load_yaml_list(yamlLineSets)
a[[1]]
a[[2]]
str(a)
a<-yum::load_yaml_list(yamlLineSets)
str(a)
str(yamlLineSets)
a<-yum::load_yaml_list(yamlLineSets, recursive = TRUE)
a
str(yamlLineSets)
load_yaml_fragments(yamlLineSets[[1]])
yum::load_yaml_fragments(yamlLineSets[[1]])
yum::load_yaml_fragments(yamlLineSets[[1]], file=NULL)
yum::extract_yaml_fragments(yamlLineSets[[1]], file=NULL)
yum::extract_yaml_fragments(text=yamlLineSets[[1]])
yamlLineSets[[1]]
source('B:/Data/R/rock/R/parse_sources.R')
dctTest <- parse_sources('B:/Data/research/decentralized-construct-taxonomy/dct-files', silent=FALSE);
source('B:/Data/R/rock/R/parse_sources.R')
dctTest <- parse_sources('B:/Data/research/decentralized-construct-taxonomy/dct-files', silent=FALSE);
yamlLineSets$attitude.dct[[1]]
yamlLineSets$attitude.dct
yamlLineSets$behavior.dct2
yum::load_yaml_list(yamlLineSets$behavior.dct2)
yum::load_yaml_list(yamlLineSets)
str(rawSpecs)
names(rawSpecs)
rawSpecs[[1]]
source('B:/Data/R/rock/R/parse_sources.R')
dctTest <- parse_sources('B:/Data/research/decentralized-construct-taxonomy/dct-files', silent=FALSE);
source('B:/Data/R/rock/R/parse_sources.R')
dctTest <- parse_sources('B:/Data/research/decentralized-construct-taxonomy/dct-files', silent=FALSE);
source('B:/Data/R/rock/R/parse_sources.R')
dctTest <- parse_sources('B:/Data/research/decentralized-construct-taxonomy/dct-files', silent=FALSE);
purrr::map(rawSpecs, 'dct')
names(rawSpecs[[1]])
names(rawSpecs[[1]][[1]])
?map
purrr::map(rawSpecs, list(list('dct')))
purrr::map(rawSpecs, 1, 'dct')
rawSpecs$behavior.dct1
source('B:/Data/R/rock/R/parse_sources.R')
dctTest <- parse_sources('B:/Data/research/decentralized-construct-taxonomy/dct-files', silent=FALSE);
source('B:/Data/R/rock/R/parse_sources.R')
source('B:/Data/R/rock/R/parse_sources.R')
dctTest$parsedSources$attitude.dct
attributes(dctTest$parsedSources$attitude.dct)
attr(dctTest$parsedSources$attitude.dct, 'yamlFragments')
?attr
attr(dctTest$parsedSources$attitude.dct, 'codings')
attr(dctTest$parsedSources$attitude.dct, 'rawSourceDf')
dctTest$parsedSources$attitude.dct
attributes(dctTest$parsedSources$attitude.dct)
dctTest$parsedSources$attitude.dct$yamlFragments
dctTest$parsedSources$behavior.dct$yamlFragments
source('B:/Data/R/rock/R/parse_sources.R')
dctTest <- parse_sources('B:/Data/research/decentralized-construct-taxonomy/dct-files', silent=FALSE);
source('B:/Data/R/rock/R/parse_sources.R')
dctTest <- parse_sources('B:/Data/research/decentralized-construct-taxonomy/dct-files', silent=FALSE);
source('B:/Data/R/rock/R/parse_sources.R')
source('B:/Data/R/rock/R/parse_sources.R')
dctTest <- parse_sources('B:/Data/research/decentralized-construct-taxonomy/dct-files', silent=FALSE);
source('B:/Data/R/rock/R/parse_sources.R')
dctTest <- parse_sources('B:/Data/research/decentralized-construct-taxonomy/dct-files', silent=FALSE);
source('B:/Data/R/rock/R/parse_sources.R')
dctTest <- parse_sources('B:/Data/research/decentralized-construct-taxonomy/dct-files', silent=FALSE);
dctTest <- parse_sources('B:/Data/research/decentralized-construct-taxonomy/dct-files');
dctTest;
source('B:/Data/R/rock/R/parse_sources.R')
enaTest <- parse_sources(path="B:/Data/research/qualitative-quantitative interfacing/Qualitative rENA/arena");
install.packages("B:/Data/R/yum_0.0.1.tar.gz", repos = NULL, type = "source")
?writeLines
source('B:/Data/R/rock/R/parse_source.R')
source('B:/Data/R/rock/R/parse_source.R')
source('B:/Data/R/rock/R/parse_source.R')
source('B:/Data/R/rock/R/parse_source.R')
source('B:/Data/R/rock/R/parse_source.R')
source('B:/Data/R/rock/R/parse_source.R')
source('B:/Data/R/rock/R/parse_source.R')
res <- parse_source("sylvias-test.rock");
res <- parse_source(here::here("tests",
"testthat",
"sylvias-test.rock"));
res
res <- parse_source(here::here("tests",
"testthat",
"second-test-file.rock"));
res <- parse_source(here::here("tests",
"testthat",
"sylvias-test.rock"));
names(res)
names(res$inductiveCodeTrees$code$IC$Attack)
res$inductiveCodeTrees$code$IC$Attack$label
res <- parse_source(here::here("tests",
"testthat",
"sylvias-test.rock"));
testthat::expect_equal(res$inductiveCodeTrees$code$IC$Attack$label,
"Attack");
res <- parse_source(here::here("tests",
"testthat",
"second-test-file.rock"));
res
res <- parse_sources(here::here("tests",
"testthat"),
regex="second-test-file.rock"));
res <- parse_sources(here::here("tests",
"testthat"),
regex="second-test-file.rock");
source('B:/Data/R/rock/R/parse_sources.R')
res <- parse_sources(here::here("tests",
"testthat"),
regex="second-test-file.rock");
source('B:/Data/R/rock/R/parse_source.R')
res <- parse_sources(here::here("tests",
"testthat"),
regex="second-test-file.rock");
source('B:/Data/R/rock/R/parse_source.R')
res <- parse_sources(here::here("tests",
"testthat"),
regex="second-test-file.rock");
source('B:/Data/R/rock/R/parse_sources.R')
res <- parse_sources(here::here("tests",
"testthat"),
regex="second-test-file.rock");
source('B:/Data/R/rock/R/parse_sources.R')
res <- parse_sources(here::here("tests",
"testthat"),
regex="second-test-file.rock");
source('B:/Data/R/rock/R/parse_source.R')
source('B:/Data/R/rock/R/parse_source.R')
source('B:/Data/R/rock/R/parse_source.R')
source('B:/Data/R/rock/R/parse_source.R')
source('B:/Data/R/rock/R/parse_source.R')
res <- parse_source(here::here("tests",
"testthat",
"second-test-file.rock"));
res$metadata
res$deductiveCodes
source('B:/Data/R/rock/R/parse_source.R')
res <- parse_source(here::here("tests",
"testthat",
"second-test-file.rock"));
res$deductiveCodeTree
source('B:/Data/R/rock/R/parse_source.R')
res <- parse_source(here::here("tests",
"testthat",
"second-test-file.rock"));
res$deductiveCodeTree
source('B:/Data/R/rock/R/parse_source.R')
source('B:/Data/R/rock/R/parse_source.R')
source('B:/Data/R/rock/R/parse_source.R')
res <- parse_source(here::here("tests",
"testthat",
"second-test-file.rock"));
res
res <- parse_source(here::here("tests",
"testthat",
"sylvias-test.rock"));
res$deductiveCodeTrees
res <- parse_source(here::here("tests",
"testthat",
"lorum-ipsum.rock"));
source('B:/Data/R/rock/R/parse_source.R')
res <- parse_source(here::here("tests",
"testthat",
"lorum-ipsum.rock"));
source('B:/Data/R/rock/R/parse_source.R')
res <- parse_source(here::here("tests",
"testthat",
"lorum-ipsum.rock"));
source('B:/Data/R/rock/R/parse_source.R')
source('B:/Data/R/rock/R/parse_source.R')
source('B:/Data/R/rock/R/parse_source.R')
res <- parse_source(here::here("tests",
"testthat",
"lorum-ipsum.rock"));
?readLines
source('B:/Data/R/rock/R/parse_source.R')
res <- parse_source(here::here("tests",
"testthat",
"lorum-ipsum.rock"));
res
source('B:/Data/R/rock/R/parse_source.R')
res
source('B:/Data/R/rock/R/parse_source.R')
res
source('B:/Data/R/rock/R/parse_source.R')
source('B:/Data/R/rock/R/parse_source.R')
res
source('B:/Data/R/rock/R/parse_source.R')
res
res <- parse_source(here::here("tests",
"testthat",
"second-test-file.rock"));
source('B:/Data/R/rock/R/parse_source.R')
res <- parse_source(here::here("tests",
"testthat",
"second-test-file.rock"));
res
source('B:/Data/R/rock/R/parse_source.R')
res <- parse_source(here::here("tests",
"testthat",
"second-test-file.rock"));
res
res$deductiveCodeTrees$EM_SEM_Psych$label
res <- parse_sources(here::here("tests",
"testthat"));
source('B:/Data/R/rock/R/parse_sources.R')
res <- parse_sources(here::here("tests",
"testthat"));
source('B:/Data/R/rock/R/parse_sources.R')
source('B:/Data/R/rock/R/parse_sources.R')
res <- parse_sources(here::here("tests",
"testthat"));
source('B:/Data/R/rock/R/parse_sources.R')
source('B:/Data/R/rock/R/parse_sources.R')
source('B:/Data/R/rock/R/parse_sources.R')
source('B:/Data/R/rock/R/parse_sources.R')
source('B:/Data/R/rock/R/parse_sources.R')
res <- parse_sources(here::here("tests",
"testthat"));
source('B:/Data/R/rock/R/parse_sources.R')
res <- parse_sources(here::here("tests",
"testthat"));
res$parsedSources$`sylvias-test.rock`$deductiveCodes
source('B:/Data/R/rock/R/parse_sources.R')
res <- parse_sources(here::here("tests",
"testthat"));
source('B:/Data/R/rock/R/parse_sources.R')
res <- parse_sources(here::here("tests",
"testthat"));
source('B:/Data/R/rock/R/parse_sources.R')
res <- parse_sources(here::here("tests",
"testthat"));
res$deductiveCodeTrees
source('B:/Data/R/rock/R/parse_sources.R')
source('B:/Data/R/rock/R/parse_sources.R')
res <- parse_sources(here::here("tests",
"testthat"));
debug(build_tree)
debug('build_tree')
debug(yum::build_tree)
res <- parse_sources(here::here("tests",
"testthat"));
install.packages("B:/Data/R/yum_0.0.1.tar.gz", repos = NULL, type = "source")
source('B:/Data/R/rock/R/parse_sources.R')
source('B:/Data/R/rock/R/parse_source.R')
source('B:/Data/R/rock/R/delete_yaml_fragments.R')
res <- parse_sources(here::here("tests",
"testthat"));
install.packages("B:/Data/R/yum_0.0.1.tar.gz", repos = NULL, type = "source")
res <- parse_sources(here::here("tests",
"testthat"));
require(yum)
res <- parse_sources(here::here("tests",
"testthat"));
install.packages("B:/Data/R/yum_0.0.1.tar.gz", repos = NULL, type = "source")
source('B:/Data/R/rock/R/parse_source.R')
source('B:/Data/R/rock/R/parse_sources.R')
res <- parse_sources(here::here("tests",
"testthat"));
install.packages("B:/Data/R/yum_0.0.1.tar.gz", repos = NULL, type = "source")
source('B:/Data/R/rock/R/parse_source.R')
source('B:/Data/R/rock/R/parse_sources.R')
res <- parse_sources(here::here("tests",
"testthat"));
res
res$deductiveCodeTrees
source('B:/Data/R/rock/R/parse_sources.R')
source('B:/Data/R/rock/R/parse_sources.R')
res <- parse_sources(here::here("tests",
"testthat"),
regex = "ipsum");
source('B:/Data/R/rock/R/apply_graph_theme.R')
res <- parse_sources(here::here("tests",
"testthat"),
regex = "ipsum");
source('B:/Data/R/rock/R/parse_sources.R')
res <- parse_sources(here::here("tests",
"testthat"),
regex = "ipsum");
source('B:/Data/R/rock/R/parse_sources.R')
res <- parse_sources(here::here("tests",
"testthat"),
regex = "ipsum");
res
length(res$deductiveCodeTree)
children(res$deductiveCodeTree)
res$deductiveCodeTree$count
source('B:/Data/R/rock/R/parse_sources.R')
res$deductiveCodeTree$count
res <- parse_sources(here::here("tests",
"testthat"),
regex = "ipsum");
res
res <- parse_sources(here::here("tests",
"testthat"));
res
?parse_sources
res <- parse_sources(here::here("tests",
"testthat"),
extension="dct");
devtools::document()
devtools::document()
devtools::document()
devtools::document()
source('B:/Data/R/rock/R/rock_example_1.R')
rock_example_1
parse_source(text=rock_example_1)
source('B:/Data/R/rock/R/rock_example_1.R')
parse_source(text=rock_example_1)
source('B:/Data/R/rock/R/parse_source.R')
parse_source(text=rock_example_1)
source('B:/Data/R/rock/R/parse_source.R')
source('B:/Data/R/rock/R/parse_source.R')
parse_source(text=rock_example_1)
source('B:/Data/R/rock/R/parse_source.R')
parse_source(text=rock_example_1)
source('B:/Data/R/rock/R/rock_example_1.R')
parse_source(text=rock_example_1)
?strsplit
source('B:/Data/R/rock/R/rock_example_1.R')
source('B:/Data/R/rock/R/rock_example_1.R')
parse_source(text=rock_example_1)
source('B:/Data/R/rock/R/parse_source.R')
parse_source(text=rock_example_1)
devtools::install_github("matherion/yum")
parse_source(text=rock_example_1)
source('B:/Data/R/rock/R/parse_source.R')
parse_source(text=rock_example_1)
source('B:/Data/R/rock/R/rock_example_1.R')
parse_source(text=rock_example_1)
?apply_graph_theme
devtools::document()
?apply_graph_theme
exampleSource <- unlist(strsplit('
---
codes:
-
id: parentCode
label: Parent code
children:
-
id: childCode1
-
id: childCode2
---', split="\\n", fixed=TRUE));
parseSource(exampleSource)
parse_source(exampleSource)
parse_source(text=exampleSource)
exampleSource
exampleSource <- unlist(strsplit('
---
codes:
-
id: parentCode
label: Parent code
children:
-
id: childCode1
-
id: childCode2
---', split="\n", fixed=TRUE));
parse_source(text=exampleSource)
exampleSource
parse_source(text=exampleSource)
source('B:/Data/R/rock/R/parse_source.R')
parse_source(text=exampleSource)
parsedSource <- parse_source(text=exampleSource)
?apply_graph_theme
exampleSource <- unlist(strsplit('
---
codes:
-
id: parentCode
label: Parent code
children:
-
id: childCode1
-
id: childCode2
---', split="\\n", fixed=TRUE));
extractedSpecs <- extract_dct_specs(text=unlist(strsplit(dct::example_dct_spec, '\n')));
dctGraph <- parse_dct_specs(extractedSpecs)$output$graph
dctGraph <- apply_graph_theme(dctGraph,
c("color", "#0000AA", "node"),
c("fillcolor", "#00FFFF", "node"));
dectools::document();
devtools::document();
?apply_graph_theme
exampleSource <- unlist(strsplit('
---
codes:
-
id: parentCode
label: Parent code
children:
-
id: childCode1
-
id: childCode2
---', split="\n", fixed=TRUE));
parsedSource <-
parse_source(text=exampleSource);
miniGraph <-
apply_graph_theme(parsedSource$deductiveCodeTrees,
c("color", "#0000AA", "node"),
c("fillcolor", "#00FFFF", "node"));
devtools::document();
?apply_graph_theme
exampleSource <- unlist(strsplit('
---
codes:
-
id: parentCode
label: Parent code
children:
-
id: childCode1
-
id: childCode2
---
', split="\n", fixed=TRUE));
parsedSource <-
parse_source(text=exampleSource);
miniGraph <-
apply_graph_theme(parsedSource$deductiveCodeTrees,
c("color", "#0000AA", "node"),
c("fillcolor", "#00FFFF", "node"));
exampleSource <- unlist(strsplit('
---
codes:
-
id: parentCode
label: Parent code
children:
-
id: childCode1
-
id: childCode2
---
', split="\n", fixed=TRUE));
parsedSource <-
parse_source(text=exampleSource);
miniGraph <-
apply_graph_theme(parsedSource$deductiveCodeTrees,
c("color", "#0000AA", "node"),
c("fillcolor", "#00FFFF", "node"));
miniGraph <-
apply_graph_theme(data.tree::ToDiagrammeRGraph(parsedSource$deductiveCodeTrees),
c("color", "#0000AA", "node"),
c("fillcolor", "#00FFFF", "node"));
miniGraph
DiagrammeR::render_graph(miniGraph)
miniGraph <-
apply_graph_theme(data.tree::ToDiagrammeRGraph(parsedSource$deductiveCodeTrees),
c("color", "#0000AA", "node"),
c("fill", "#00FFFF", "node"));
miniGraph <-
apply_graph_theme(data.tree::ToDiagrammeRGraph(parsedSource$deductiveCodeTrees),
c("color", "#0000AA", "node"),
c("fill", "#00FFFF", "node"));DiagrammeR::render_graph(miniGraph)
miniGraph <-
apply_graph_theme(data.tree::ToDiagrammeRGraph(parsedSource$deductiveCodeTrees),
c("color", "#0000AA", "node"),
c("textcolor", "#00FFFF", "node"));DiagrammeR::render_graph(miniGraph)
miniGraph <-
apply_graph_theme(data.tree::ToDiagrammeRGraph(parsedSource$deductiveCodeTrees),
c("color", "#0000AA", "node"),
c("fontcolor", "#00FFFF", "node"));DiagrammeR::render_graph(miniGraph)
miniGraph <-
apply_graph_theme(data.tree::ToDiagrammeRGraph(parsedSource$deductiveCodeTrees),
c("color", "#0000AA", "node"),
c("shape", "triangle", "node"),
c("fontcolor", "#00FFFF", "node"));DiagrammeR::render_graph(miniGraph)
miniGraph <-
apply_graph_theme(data.tree::ToDiagrammeRGraph(parsedSource$deductiveCodeTrees),
c("color", "#0000AA", "node"),
c("shape", "triangle", "node"));DiagrammeR::render_graph(miniGraph)
devtools::document()
?apply_graph_theme
miniGraph <-
apply_graph_theme(data.tree::ToDiagrammeRGraph(parsedSource$deductiveCodeTrees),
c("color", "#0000AA", "node"),
c("shape", "triangle", "node"),
c("fontcolor", "#FF0000", "node"));
plot(miniGraph)
render(miniGraph)
render_graph(miniGraph)
DiagrammeR::render_graph(miniGraph)
